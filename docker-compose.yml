version: '3'
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - all

  # indexer:
  #   image: indexer
  #   container_name: indexer
  #   environment:
  #     ENV: local
  #   volumes:
  #     - api_data:/data
  #   networks:
  #     - all
  #   depends_on:
  #     - rabbitmq
  #     - elasticsearch
  #   logging:
  #     driver: 'gelf'
  #     options:
  #       gelf-address: 'udp://127.0.0.1:12201'
  #   restart: unless-stopped

  # rest_api:
  #   image: api
  #   container_name: api
  #   environment:
  #     ENV: local
  #   ports:
  #     - '8080:8080'
  #   volumes:
  #     - api_data:/data
  #   networks:
  #     - all
  #   depends_on:
  #     - redis
  #     - postgres
  #     - rabbitmq
  #     - elasticsearch
  #   logging:
  #     driver: 'gelf'
  #     options:
  #       gelf-address: 'udp://127.0.0.1:12201'
  #   restart: unless-stopped

  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: 'server --console-address ":9001" /minio_data'
    ports:
      - '10000:9000'
      - '10001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:9000/minio/health/live'
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    hostname: minio
    volumes:
      - 'minio_data:/data'
    restart: unless-stopped

  redis:
    image: redis
    container_name: redis
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      ALLOW_EMPTY_PASSWORD: "yes"
      REDIS_REPLICATION_MODE: master
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_DB: demo
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - '5432:5432'
    networks:
      - all
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://127.0.0.1:12201'
    restart: unless-stopped
    
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq/'
    environment:
      RABBITMQ_ERLANG_COOKIE: democookie
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: root
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - all
    restart: unless-stopped

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=elastic
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "action.auto_create_index=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 10g
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - all
    restart: unless-stopped

networks:
  all:
    driver: bridge
volumes:
  api_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  es_data:
    driver: local
  minio_data:
    driver: local
  netdataconfig:
    driver: local
  netdatalib:
    driver: local
  netdatacache:
    driver: local
