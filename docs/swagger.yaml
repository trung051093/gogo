definitions:
  authmodel.AuthForgotPasswordDto:
    properties:
      email:
        type: string
      forgotPasswordUri:
        type: string
    required:
    - email
    - forgotPasswordUri
    type: object
  authmodel.AuthLoginDto:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authmodel.AuthRegisterDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  authmodel.AuthResetPasswordDto:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    - token
    type: object
  authmodel.AuthResponseDto:
    properties:
      created:
        type: integer
      expiry:
        type: integer
      token:
        type: string
    type: object
  common.AppError:
    properties:
      errorKey:
        type: string
      log:
        type: string
      message:
        type: string
      statusCode:
        type: integer
    type: object
  common.CursorPagination:
    properties:
      cursor:
        $ref: '#/definitions/paginator.Cursor'
      limit:
        type: integer
      order:
        type: string
      total:
        type: integer
    type: object
  common.Response:
    properties:
      data: {}
    type: object
  common.ResponsePagination:
    properties:
      data: {}
      filter: {}
      pagination: {}
    type: object
  filemodel.PresignedPostObject:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
      url:
        type: string
    type: object
  paginator.Cursor:
    properties:
      after:
        type: string
      before:
        type: string
    type: object
  usermodel.User:
    properties:
      address:
        type: string
      birthDate:
        type: string
      company:
        type: string
      created_at:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  usermodel.UserCreateDto:
    properties:
      address:
        type: string
      birthDate:
        type: string
      company:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
    required:
    - email
    - firstName
    - lastName
    type: object
  usermodel.UserEsSearchResult:
    properties:
      hits:
        items:
          additionalProperties: true
          type: object
        type: array
      total:
        type: integer
    type: object
  usermodel.UserUpdateDto:
    properties:
      address:
        type: string
      birthDate:
        type: string
      company:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: ForgotPassword
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthForgotPasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: ForgotPassword
      tags:
      - auth
  /api/v1/auth/google/callback:
    get:
      consumes:
      - application/json
      description: Google callback
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.AuthResponseDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Google callback
      tags:
      - auth
  /api/v1/auth/google/login:
    get:
      consumes:
      - application/json
      description: Google login
      parameters:
      - description: redirect
        in: query
        name: redirectUri
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Temporary Redirect
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Google login
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.AuthResponseDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthRegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Register
      tags:
      - auth
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: ResetPassword
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthResetPasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: ResetPassword
      tags:
      - auth
  /api/v1/file/presign-url:
    get:
      consumes:
      - application/json
      description: get a presigned url to upload
      parameters:
      - description: fileName
        in: query
        name: fileName
        required: true
        type: string
      - description: fileType
        in: query
        name: fileType
        required: true
        type: string
      - description: proxy
        in: query
        name: proxy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/filemodel.PresignedPostObject'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      summary: get a presigned url to upload
      tags:
      - file
  /api/v1/user:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /api/v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Delete an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/usermodel.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get an user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: Add account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Update an user
      tags:
      - users
  /api/v1/user/search:
    get:
      consumes:
      - application/json
      description: search user
      parameters:
      - description: query
        in: query
        name: query
        required: true
        type: string
      - description: lastIndex
        in: query
        name: lastIndex
        type: string
      - description: sort by field
        in: query
        name: sortField
        type: string
      - description: sort by field
        in: query
        name: sortName
        type: string
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/usermodel.UserEsSearchResult'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Search an user
      tags:
      - users
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: fields
        in: query
        name: fields
        type: integer
      - description: before cursor
        in: query
        name: before
        type: string
      - description: after cursor
        in: query
        name: after
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: sort by field
        in: query
        name: sortField
        type: string
      - description: sort by field
        in: query
        name: sortName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/usermodel.User'
                  type: array
                pagination:
                  $ref: '#/definitions/common.CursorPagination'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get list of user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
